import pandas as pd
import streamlit as st
import plotly.express as px

from methods import (
    analyze_city_data_avg_and_std,
    get_temperature_for_city,
    temperature_segment_for_city,
    union_of_two_analysis,
    visualize,
)


def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä", page_icon="üå§Ô∏è", layout="wide")
    st.markdown(
        """
        <h1 style='text-align: center; color: #4CAF50;'>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</h1>
        <p style='text-align: center; font-size: 18px;'>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º</p>
    """,
        unsafe_allow_html=True,
    )

    uploaded_file = st.file_uploader("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ")

    if uploaded_file is not None:
        dataframe = pd.read_csv(uploaded_file, parse_dates=["timestamp"])

        if dataframe.empty:
            st.warning("‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç!", icon="‚ö†Ô∏è")
            return

        st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        city = st.sidebar.selectbox(
            "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", tuple(dataframe["city"].unique()), index=None
        )
        api_key = st.sidebar.text_input("üîë API –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–ù–µ—Ç")

        if city:
            st.markdown(f"## üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city}")
            analysis_result = union_of_two_analysis(dataframe)
            fig = visualize(analysis_result, city)
            st.plotly_chart(fig)

            if api_key != "–ù–µ—Ç":
                historical_data = temperature_segment_for_city(dataframe, city)
                cur_temp = get_temperature_for_city(city, api_key=api_key)
                with st.expander("üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"):
                    if not cur_temp:
                        st.error("üö® API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π!")
                        st.info(
                            "–ü–æ—Å–µ—Ç–∏—Ç–µ [OpenWeatherMap](https://openweathermap.org/faq#error401) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                        )
                    else:
                        st.success(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}: {cur_temp}¬∞C")
                        status = (
                            "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–π"
                            if abs(historical_data[1] - cur_temp) <= 10
                            else "–∞–Ω–æ–º–∞–ª—å–Ω–æ–π"
                        )
                        st.write(f"üîç –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è: **{status}**")

            city_data = dataframe[dataframe["city"] == city]
            seasonal_analysis = analyze_city_data_avg_and_std(city_data)

            with st.expander("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"):
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", len(city_data))
                st.metric(
                    "–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{city_data['temperature'].mean():.2f}¬∞C"
                )
                st.metric(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{city_data['temperature'].min():.2f}¬∞C"
                )
                st.metric(
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    f"{city_data['temperature'].max():.2f}¬∞C",
                )

            st.markdown("### üìÖ –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            fig_seasonal = px.box(
                seasonal_analysis,
                x="season",
                y="mean",
                title="–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º",
                color="season",
                template="plotly_dark",
            )
            st.plotly_chart(fig_seasonal)


if __name__ == "__main__":
    main()
